#!/usr/bin/env python
import sys, os
from subprocess import call
from time import sleep

class color:
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'

currentpath = os.path.dirname(os.path.abspath(sys.argv[0]))

savepath = os.path.join(os.path.expanduser("~"),"Desktop/")

HS78 = None
HS1112 = None
SS12 = None
SS34 = None

HUBC = ""
UMAP = ""
USBSSDT = '/*\n * Intel ACPI Component Architecture\n * AML/ASL+ Disassembler version 20160422-64(RM)\n * Copyright (c) 2000 - 2016 Intel Corporation\n * \n * Disassembling to non-symbolic legacy ASL operators\n *\n * Disassembly of iASL3JZJNG.aml, Mon Jul 18 00:57:28 2016\n *\n * Original Table Header:\n *     Signature        "SSDT"\n *     Length           0x00000073 (115)\n *     Revision         0x02\n *     Checksum         0xAF\n *     OEM ID           "APPLE "\n *     OEM Table ID     "Xhci"\n *     OEM Revision     0x00001000 (4096)\n *     Compiler ID      "INTL"\n *     Compiler Version 0x20160422 (538313762)\n */\nDefinitionBlock ("", "SSDT", 2, "APPLE ", "Xhci", 0x00001000)\n{\n    External (HUBC, IntObj)    // (from opcode)\n    External (UMAP, IntObj)    // (from opcode)\n\n    Scope (\_SB)\n    {\n        Method (_INI, 0, NotSerialized)  // _INI: Initialize\n        {\n            Store ("Method \\\_SB._INI Called", Debug)\n            Store ([REPLACEHUBC], \HUBC)\n            Store ([REPLACEUMAP], \UMAP)\n        }\n    }\n}'
SSDT5 = '/*\n * Intel ACPI Component Architecture\n * AML/ASL+ Disassembler version 20160422-64(RM)\n * Copyright (c) 2000 - 2016 Intel Corporation\n * \n * Disassembling to non-symbolic legacy ASL operators\n *\n * Disassembly of iASLADoB6K.aml, Mon Jul 18 01:54:11 2016\n *\n * Original Table Header:\n *     Signature        "SSDT"\n *     Length           0x00002B83 (11139)\n *     Revision         0x02\n *     Checksum         0x97\n *     OEM ID           "INTEL"\n *     OEM Table ID     "xh_rvp10"\n *     OEM Revision     0x00000000 (0)\n *     Compiler ID      "INTL"\n *     Compiler Version 0x20160422 (538313762)\n */\nDefinitionBlock ("", "SSDT", 2, "INTEL", "xh_rvp10", 0x00000000)\n{\n    External (_SB_.PCI0.XHC_.RHUB, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS01.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS01.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS01.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS01.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS02.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS02.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS02.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS02.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS03.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS03.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS03.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS03.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS04.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS04.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS04.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS04.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS05, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS05.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS05.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS05.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS05.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS06, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS06.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS06.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS06.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS06.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS07, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS07.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS07.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS07.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS07.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS08, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS08.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS08.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS08.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS08.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS09, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS09.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS09.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS09.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS09.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS10, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS10.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS10.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS10.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS10.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS11, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS12, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS13, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.HS14, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS01.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS01.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS01.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS01.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS02.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS02.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS02.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS02.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS03.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS03.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS03.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS03.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS04.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS04.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS04.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS04.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS05, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS05.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS05.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS05.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS05.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS06, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS06.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS06.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS06.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS06.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS07, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS07.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS07.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS07.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS07.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS08, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS08.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS08.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS08.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS08.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS09, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS09.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS09.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS09.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS09.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS10, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS10.DP01, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS10.DP02, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS10.DP03, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.SS10.DP04, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.USR1, DeviceObj)    // (from opcode)\n    External (_SB_.PCI0.XHC_.RHUB.USR2, DeviceObj)    // (from opcode)\n    External (HUBC, UnknownObj)    // (from opcode)\n    External (PCHV, UnknownObj)    // (from opcode)\n    External (SPTH, UnknownObj)    // (from opcode)\n    External (UMAP, UnknownObj)    // (from opcode)\n\n    Scope (\_SB.PCI0.XHC.RHUB)\n    {\n        Method (GPLD, 2, Serialized)\n        {\n            Name (PCKG, Package (One)\n            {\n                Buffer (0x10) {}\n            })\n            CreateField (DerefOf (Index (PCKG, Zero)), Zero, 0x07, REV)\n            Store (One, REV)\n            CreateField (DerefOf (Index (PCKG, Zero)), 0x40, One, VISI)\n            Store (Arg0, VISI)\n            CreateField (DerefOf (Index (PCKG, Zero)), 0x57, 0x08, GPOS)\n            Store (Arg1, GPOS)\n            Return (PCKG)\n        }\n\n        Method (GUPC, 2, Serialized)\n        {\n            Name (PCKG, Package (0x04)\n            {\n                Zero, \n                0xFF, \n                Zero, \n                Zero\n            })\n            Store (Arg0, Index (PCKG, Zero))\n            Store (Arg1, Index (PCKG, One))\n            Return (PCKG)\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.HS01)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (HUBC, One), One))\n            {\n                Return (GUPC (Zero, [SS12]))\n            }\n            Else\n            {\n                Return (GUPC (One, [SS12]))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (HUBC, One), One))\n            {\n                Return (GPLD (Zero, Zero))\n            }\n            Else\n            {\n                Return (GPLD ([SS12GPLD], One))\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.HS02)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (HUBC, 0x02), 0x02))\n            {\n                Return (GUPC (Zero, [SS12]))\n            }\n            Else\n            {\n                Return (GUPC (One, [SS12]))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (HUBC, 0x02), 0x02))\n            {\n                Return (GPLD (Zero, Zero))\n            }\n            Else\n            {\n                Return (GPLD ([SS12GPLD], 0x02))\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.HS03)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (HUBC, 0x04), 0x04))\n            {\n                Return (GUPC (Zero, [SS34]))\n            }\n            Else\n            {\n                Return (GUPC (One, [SS34]))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (HUBC, 0x04), 0x04))\n            {\n                Return (GPLD (Zero, Zero))\n            }\n            Else\n            {\n                Return (GPLD ([SS34GPLD], 0x03))\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.HS04)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (HUBC, 0x08), 0x08))\n            {\n                Return (GUPC (Zero, [SS34]))\n            }\n            Else\n            {\n                Return (GUPC (One, [SS34]))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (HUBC, 0x08), 0x08))\n            {\n                Return (GPLD (Zero, Zero))\n            }\n            Else\n            {\n                Return (GPLD ([SS34GPLD], 0x04))\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.HS05)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (HUBC, 0x10), 0x10))\n            {\n                Return (GUPC (Zero, 0x03))\n            }\n            Else\n            {\n                Return (GUPC (One, 0x03))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (HUBC, 0x10), 0x10))\n            {\n                Return (GPLD (Zero, Zero))\n            }\n            Else\n            {\n                Return (GPLD (One, 0x05))\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.HS06)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (HUBC, 0x20), 0x20))\n            {\n                Return (GUPC (Zero, 0x03))\n            }\n            Else\n            {\n                Return (GUPC (One, 0x03))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (HUBC, 0x20), 0x20))\n            {\n                Return (GPLD (Zero, Zero))\n            }\n            Else\n            {\n                Return (GPLD (One, 0x06))\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.HS07)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (HUBC, 0x40), 0x40))\n            {\n                Return (GUPC (Zero, [HS78]))\n            }\n            Else\n            {\n                Return (GUPC (One, [HS78]))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (HUBC, 0x40), 0x40))\n            {\n                Return (GPLD (Zero, Zero))\n            }\n            Else\n            {\n                Return (GPLD ([HS78GPLD], 0x07))\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.HS08)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (HUBC, 0x80), 0x80))\n            {\n                Return (GUPC (Zero, [HS78]))\n            }\n            Else\n            {\n                Return (GUPC (One, [HS78]))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (HUBC, 0x80), 0x80))\n            {\n                Return (GPLD (Zero, Zero))\n            }\n            Else\n            {\n                Return (GPLD ([HS78GPLD], 0x08))\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.HS09)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (HUBC, 0x0100), 0x0100))\n            {\n                Return (GUPC (Zero, 0x03))\n            }\n            Else\n            {\n                Return (GUPC (One, 0x03))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (HUBC, 0x0100), 0x0100))\n            {\n                Return (GPLD (Zero, Zero))\n            }\n            Else\n            {\n                Return (GPLD (One, 0x09))\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.HS10)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (HUBC, 0x0200), 0x0200))\n            {\n                Return (GUPC (Zero, 0xFF))\n            }\n            Else\n            {\n                Return (GUPC (One, 0xFF))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (HUBC, 0x0200), 0x0200))\n            {\n                Return (GPLD (Zero, Zero))\n            }\n            Else\n            {\n                Return (GPLD (One, 0x0A))\n            }\n        }\n    }\n\n    If (LEqual (PCHV, SPTH))\n    {\n        Scope (\_SB.PCI0.XHC.RHUB.HS11)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                If (LEqual (And (HUBC, 0x0400), 0x0400))\n                {\n                    Return (GUPC (Zero, [HS1112]))\n                }\n                Else\n                {\n                    Return (GUPC (One, [HS1112]))\n                }\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                If (LEqual (And (HUBC, 0x0400), 0x0400))\n                {\n                    Return (GPLD (Zero, Zero))\n                }\n                Else\n                {\n                    Return (GPLD ([HS1112GPLD], 0x0B))\n                }\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS12)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                If (LEqual (And (HUBC, 0x0800), 0x0800))\n                {\n                    Return (GUPC (Zero, [HS1112]))\n                }\n                Else\n                {\n                    Return (GUPC (One, [HS1112]))\n                }\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                If (LEqual (And (HUBC, 0x0800), 0x0800))\n                {\n                    Return (GPLD (Zero, Zero))\n                }\n                Else\n                {\n                    Return (GPLD ([HS1112GPLD], 0x0C))\n                }\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS13)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                If (LEqual (And (HUBC, 0x1000), 0x1000))\n                {\n                    Return (GUPC (Zero, Zero))\n                }\n                Else\n                {\n                    Return (GUPC (One, Zero))\n                }\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                If (LEqual (And (HUBC, 0x1000), 0x1000))\n                {\n                    Return (GPLD (Zero, Zero))\n                }\n                Else\n                {\n                    Return (GPLD (One, 0x0D))\n                }\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS14)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                If (LEqual (And (HUBC, 0x2000), 0x2000))\n                {\n                    Return (GUPC (Zero, Zero))\n                }\n                Else\n                {\n                    Return (GUPC (One, Zero))\n                }\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                If (LEqual (And (HUBC, 0x2000), 0x2000))\n                {\n                    Return (GPLD (Zero, Zero))\n                }\n                Else\n                {\n                    Return (GPLD (One, 0x0E))\n                }\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.USR1)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            Return (GUPC (Zero, 0xFF))\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            Return (GPLD (Zero, Zero))\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.USR2)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            Return (GUPC (Zero, 0xFF))\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            Return (GPLD (Zero, Zero))\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.SS01)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (UMAP, One), One))\n            {\n                If (LEqual (And (HUBC, One), One))\n                {\n                    Return (GUPC (Zero, [SS12]))\n                }\n                Else\n                {\n                    Return (GUPC (One, [SS12]))\n                }\n            }\n            Else\n            {\n                Return (GUPC (Zero, [SS12]))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (UMAP, One), One))\n            {\n                If (LEqual (And (HUBC, One), One))\n                {\n                    Return (GPLD (Zero, Zero))\n                }\n                Else\n                {\n                    Return (GPLD ([SS12GPLD], One))\n                }\n            }\n            Else\n            {\n                Return (GPLD (Zero, Zero))\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.SS02)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (UMAP, 0x02), 0x02))\n            {\n                If (LEqual (And (HUBC, 0x02), 0x02))\n                {\n                    Return (GUPC (Zero, [SS12]))\n                }\n                Else\n                {\n                    Return (GUPC (One, [SS12]))\n                }\n            }\n            Else\n            {\n                Return (GUPC (Zero, [SS12]))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (UMAP, 0x02), 0x02))\n            {\n                If (LEqual (And (HUBC, 0x02), 0x02))\n                {\n                    Return (GPLD (Zero, Zero))\n                }\n                Else\n                {\n                    Return (GPLD ([SS12GPLD], 0x02))\n                }\n            }\n            Else\n            {\n                Return (GPLD (Zero, Zero))\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.SS03)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (UMAP, 0x04), 0x04))\n            {\n                If (LEqual (And (HUBC, 0x04), 0x04))\n                {\n                    Return (GUPC (Zero, [SS34]))\n                }\n                Else\n                {\n                    Return (GUPC (One, [SS34]))\n                }\n            }\n            Else\n            {\n                Return (GUPC (Zero, [SS34]))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (UMAP, 0x04), 0x04))\n            {\n                If (LEqual (And (HUBC, 0x04), 0x04))\n                {\n                    Return (GPLD (Zero, Zero))\n                }\n                Else\n                {\n                    Return (GPLD ([SS34GPLD], 0x03))\n                }\n            }\n            Else\n            {\n                Return (GPLD (Zero, Zero))\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.SS04)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (UMAP, 0x08), 0x08))\n            {\n                If (LEqual (And (HUBC, 0x08), 0x08))\n                {\n                    Return (GUPC (Zero, [SS34]))\n                }\n                Else\n                {\n                    Return (GUPC (One, [SS34]))\n                }\n            }\n            Else\n            {\n                Return (GUPC (Zero, [SS34]))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (UMAP, 0x08), 0x08))\n            {\n                If (LEqual (And (HUBC, 0x08), 0x08))\n                {\n                    Return (GPLD (Zero, Zero))\n                }\n                Else\n                {\n                    Return (GPLD (One, 0x04))\n                }\n            }\n            Else\n            {\n                Return (GPLD (Zero, Zero))\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.SS05)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (UMAP, 0x10), 0x10))\n            {\n                If (LEqual (And (HUBC, 0x10), 0x10))\n                {\n                    Return (GUPC (Zero, 0x03))\n                }\n                Else\n                {\n                    Return (GUPC (One, 0x03))\n                }\n            }\n            Else\n            {\n                Return (GUPC (Zero, 0x03))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (UMAP, 0x10), 0x10))\n            {\n                If (LEqual (And (HUBC, 0x10), 0x10))\n                {\n                    Return (GPLD (Zero, Zero))\n                }\n                Else\n                {\n                    Return (GPLD (One, 0x05))\n                }\n            }\n            Else\n            {\n                Return (GPLD (Zero, Zero))\n            }\n        }\n    }\n\n    Scope (\_SB.PCI0.XHC.RHUB.SS06)\n    {\n        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n        {\n            If (LEqual (And (UMAP, 0x20), 0x20))\n            {\n                If (LEqual (And (HUBC, 0x20), 0x20))\n                {\n                    Return (GUPC (Zero, 0x03))\n                }\n                Else\n                {\n                    Return (GUPC (One, 0x03))\n                }\n            }\n            Else\n            {\n                Return (GUPC (Zero, 0x03))\n            }\n        }\n\n        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n        {\n            If (LEqual (And (UMAP, 0x20), 0x20))\n            {\n                If (LEqual (And (HUBC, 0x20), 0x20))\n                {\n                    Return (GPLD (Zero, Zero))\n                }\n                Else\n                {\n                    Return (GPLD (One, 0x06))\n                }\n            }\n            Else\n            {\n                Return (GPLD (Zero, Zero))\n            }\n        }\n    }\n\n    If (LEqual (PCHV, SPTH))\n    {\n        Scope (\_SB.PCI0.XHC.RHUB.SS07)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                If (LEqual (And (UMAP, 0x40), 0x40))\n                {\n                    If (LEqual (And (HUBC, 0x40), 0x40))\n                    {\n                        Return (GUPC (Zero, 0xFF))\n                    }\n                    Else\n                    {\n                        Return (GUPC (One, 0xFF))\n                    }\n                }\n                Else\n                {\n                    Return (GUPC (Zero, 0xFF))\n                }\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                If (LEqual (And (UMAP, 0x40), 0x40))\n                {\n                    If (LEqual (And (HUBC, 0x40), 0x40))\n                    {\n                        Return (GPLD (Zero, Zero))\n                    }\n                    Else\n                    {\n                        Return (GPLD (One, 0x07))\n                    }\n                }\n                Else\n                {\n                    Return (GPLD (Zero, Zero))\n                }\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS08)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                If (LEqual (And (UMAP, 0x80), 0x80))\n                {\n                    If (LEqual (And (HUBC, 0x80), 0x80))\n                    {\n                        Return (GUPC (Zero, 0xFF))\n                    }\n                    Else\n                    {\n                        Return (GUPC (One, 0xFF))\n                    }\n                }\n                Else\n                {\n                    Return (GUPC (Zero, 0xFF))\n                }\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                If (LEqual (And (UMAP, 0x80), 0x80))\n                {\n                    If (LEqual (And (HUBC, 0x80), 0x80))\n                    {\n                        Return (GPLD (Zero, Zero))\n                    }\n                    Else\n                    {\n                        Return (GPLD (One, 0x08))\n                    }\n                }\n                Else\n                {\n                    Return (GPLD (Zero, Zero))\n                }\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS09)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                If (LEqual (And (UMAP, 0x0100), 0x0100))\n                {\n                    If (LEqual (And (HUBC, 0x0100), 0x0100))\n                    {\n                        Return (GUPC (Zero, 0x03))\n                    }\n                    Else\n                    {\n                        Return (GUPC (One, 0x03))\n                    }\n                }\n                Else\n                {\n                    Return (GUPC (Zero, 0x03))\n                }\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                If (LEqual (And (UMAP, 0x0100), 0x0100))\n                {\n                    If (LEqual (And (HUBC, 0x0100), 0x0100))\n                    {\n                        Return (GPLD (Zero, Zero))\n                    }\n                    Else\n                    {\n                        Return (GPLD (One, 0x09))\n                    }\n                }\n                Else\n                {\n                    Return (GPLD (Zero, Zero))\n                }\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS10)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                If (LEqual (And (UMAP, 0x0200), 0x0200))\n                {\n                    If (LEqual (And (HUBC, 0x0200), 0x0200))\n                    {\n                        Return (GUPC (Zero, 0xFF))\n                    }\n                    Else\n                    {\n                        Return (GUPC (One, 0xFF))\n                    }\n                }\n                Else\n                {\n                    Return (GUPC (Zero, 0xFF))\n                }\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                If (LEqual (And (UMAP, 0x0200), 0x0200))\n                {\n                    If (LEqual (And (HUBC, 0x0200), 0x0200))\n                    {\n                        Return (GPLD (Zero, Zero))\n                    }\n                    Else\n                    {\n                        Return (GPLD (One, 0x0A))\n                    }\n                }\n                Else\n                {\n                    Return (GPLD (Zero, Zero))\n                }\n            }\n        }\n    }\n\n    If (LEqual (And (HUBC, One), One))\n    {\n        Scope (\_SB.PCI0.XHC.RHUB.HS01.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS01.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS01.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS01.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS01.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS01.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS01.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS01.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n    }\n\n    If (LEqual (And (HUBC, 0x02), 0x02))\n    {\n        Scope (\_SB.PCI0.XHC.RHUB.HS02.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS02.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS02.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS02.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS02.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS02.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS02.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS02.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n    }\n\n    If (LEqual (And (HUBC, 0x04), 0x04))\n    {\n        Scope (\_SB.PCI0.XHC.RHUB.HS03.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS03.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS03.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS03.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS03.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS03.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS03.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS03.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n    }\n\n    If (LEqual (And (HUBC, 0x08), 0x08))\n    {\n        Scope (\_SB.PCI0.XHC.RHUB.HS04.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS04.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS04.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS04.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS04.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS04.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS04.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS04.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n    }\n\n    If (LEqual (And (HUBC, 0x10), 0x10))\n    {\n        Scope (\_SB.PCI0.XHC.RHUB.HS05.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS05.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS05.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS05.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS05.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS05.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS05.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS05.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n    }\n\n    If (LEqual (And (HUBC, 0x20), 0x20))\n    {\n        Scope (\_SB.PCI0.XHC.RHUB.HS06.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS06.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS06.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS06.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS06.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS06.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS06.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.SS06.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n    }\n\n    If (LEqual (And (HUBC, 0x40), 0x40))\n    {\n        Scope (\_SB.PCI0.XHC.RHUB.HS07.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS07.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS07.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS07.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n\n        If (LEqual (PCHV, SPTH))\n        {\n            Scope (\_SB.PCI0.XHC.RHUB.SS07.DP01)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, One))\n                }\n            }\n\n            Scope (\_SB.PCI0.XHC.RHUB.SS07.DP02)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, 0x02))\n                }\n            }\n\n            Scope (\_SB.PCI0.XHC.RHUB.SS07.DP03)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, 0x03))\n                }\n            }\n\n            Scope (\_SB.PCI0.XHC.RHUB.SS07.DP04)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, 0x04))\n                }\n            }\n        }\n    }\n\n    If (LEqual (And (HUBC, 0x80), 0x80))\n    {\n        Scope (\_SB.PCI0.XHC.RHUB.HS08.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS08.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS08.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS08.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n\n        If (LEqual (PCHV, SPTH))\n        {\n            Scope (\_SB.PCI0.XHC.RHUB.SS08.DP01)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, One))\n                }\n            }\n\n            Scope (\_SB.PCI0.XHC.RHUB.SS08.DP02)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, 0x02))\n                }\n            }\n\n            Scope (\_SB.PCI0.XHC.RHUB.SS08.DP03)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, 0x03))\n                }\n            }\n\n            Scope (\_SB.PCI0.XHC.RHUB.SS08.DP04)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, 0x04))\n                }\n            }\n        }\n    }\n\n    If (LEqual (And (HUBC, 0x0100), 0x0100))\n    {\n        Scope (\_SB.PCI0.XHC.RHUB.HS09.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS09.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS09.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS09.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n\n        If (LEqual (PCHV, SPTH))\n        {\n            Scope (\_SB.PCI0.XHC.RHUB.SS09.DP01)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, One))\n                }\n            }\n\n            Scope (\_SB.PCI0.XHC.RHUB.SS09.DP02)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, 0x02))\n                }\n            }\n\n            Scope (\_SB.PCI0.XHC.RHUB.SS09.DP03)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, 0x03))\n                }\n            }\n\n            Scope (\_SB.PCI0.XHC.RHUB.SS09.DP04)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, 0x04))\n                }\n            }\n        }\n    }\n\n    If (LEqual (And (HUBC, 0x0200), 0x0200))\n    {\n        Scope (\_SB.PCI0.XHC.RHUB.HS10.DP01)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, One))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS10.DP02)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x02))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS10.DP03)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x03))\n            }\n        }\n\n        Scope (\_SB.PCI0.XHC.RHUB.HS10.DP04)\n        {\n            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n            {\n                Return (GUPC (One, 0xFF))\n            }\n\n            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n            {\n                Return (GPLD (One, 0x04))\n            }\n        }\n\n        If (LEqual (PCHV, SPTH))\n        {\n            Scope (\_SB.PCI0.XHC.RHUB.SS10.DP01)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, One))\n                }\n            }\n\n            Scope (\_SB.PCI0.XHC.RHUB.SS10.DP02)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, 0x02))\n                }\n            }\n\n            Scope (\_SB.PCI0.XHC.RHUB.SS10.DP03)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, 0x03))\n                }\n            }\n\n            Scope (\_SB.PCI0.XHC.RHUB.SS10.DP04)\n            {\n                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities\n                {\n                    Return (GUPC (One, 0xFF))\n                }\n\n                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device\n                {\n                    Return (GPLD (One, 0x04))\n                }\n            }\n        }\n    }\n}'
try:
    os.remove(os.path.join(savepath,"USB-SSDT.dsl"))
except OSError:
    pass
try:
    os.remove(os.path.join(savepath,"USB-SSDT.aml"))
except OSError:
    pass
try:
    os.remove(os.path.join(savepath,"SSDT-5.dsl"))
except OSError:
    pass
try:
    os.remove(os.path.join(savepath,"SSDT-5.aml"))
except OSError:
    pass


def query_yes_no(question, default="yes"):
    """Ask a yes/no question via raw_input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is True for "yes" or False for "no".
    """
    valid = {"yes": True, "y": True, "ye": True,
             "no": False, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "
                             "(or 'y' or 'n').\n")

print "Script written by cnrd and made for GA-Z170X-UD3."
print "Thanks to Pike R. Alpha for the idea."
sleep(0.5)
print "\n" * 4

for i in range(1, 15):
    if (not i == 10):
        if query_yes_no("Do you want to enable: " + color.BOLD + "HS" + str(i).zfill(2) + color.END + "?"):
            HUBC = "0" + HUBC
            if (i == 1 or i == 2) and SS12 == None:
                if query_yes_no("You enabled: " + color.BOLD + "HS" + str(i).zfill(2) + color.END + ", are you using it as an externally connected port (For example front USB)?"):
                    SS12 = True
                else:
                    SS12 = False
            if (i == 3 or i == 4) and SS34 == None:
                if query_yes_no("You enabled: " + color.BOLD + "HS" + str(i).zfill(2) + color.END + ", are you using it as an externally connected port (For example front USB)?"):
                    SS34 = True
                else:
                    SS34 = False
            if (i == 7 or i == 8) and HS78 == None:
                if query_yes_no("You enabled: " + color.BOLD + "HS" + str(i).zfill(2) + color.END + ", are you using it as an externally connected port (For example front USB)?"):
                    HS78 = True
                else:
                    HS78 = False
            if (i == 11 or i == 12) and HS1112 == None:
                if query_yes_no("You enabled: " + color.BOLD + "HS" + str(i).zfill(2) + color.END + ", are you using it as an externally connected port (For example front USB)?"):
                    HS1112 = True
                else:
                    HS1112 = False

        else:
            HUBC = "1" + HUBC
    else:
        HUBC = "1" + HUBC

HUBC = ("1" * (16 - len(HUBC))) + HUBC

for i in range(1, 11):
    if not (i == 7 or i == 8 or i == 10):
        if query_yes_no("Do you want to enable: " + color.BOLD + "SS" + str(i).zfill(2) + color.END + "?"):
            UMAP = "1" + UMAP
            if (i == 1 or i == 2) and SS12 == None:
                if query_yes_no("You enabled: " + color.BOLD + "SS" + str(i).zfill(2) + color.END + ", are you using it as an externally connected port (For example front USB)?"):
                    SS12 = True
                else:
                    SS12 = False
            if (i == 3 or i == 4) and SS34 == None:
                if query_yes_no("You enabled: " + color.BOLD + "SS" + str(i).zfill(2) + color.END + ", are you using it as an externally connected port (For example front USB)?"):
                    SS34 = True
                else:
                    SS34 = False
        else:
            UMAP = "0" + UMAP
    else:
        UMAP = "0" + UMAP

UMAP = ("0" * (16 - len(UMAP))) + UMAP


if (HUBC.count("0") + UMAP.count("1")) > 15:
	if not query_yes_no("You have more than 15 ports enabled, this require the ports patch, do you want to continue?", "no"):
		print "\n"
		print "Okay the program will exit now, run again and choose max 15 ports to avoid ports patch."
		exit()
	else:
		pass

HUBC = str(hex(int(HUBC, 2)))
UMAP = str(hex(int(UMAP, 2)))

USBSSDT = USBSSDT.replace("[REPLACEHUBC]", HUBC)
USBSSDT = USBSSDT.replace("[REPLACEUMAP]", UMAP)

if HS78:
    SSDT5 = SSDT5.replace("[HS78]", "0x00")
    SSDT5 = SSDT5.replace("[HS78GPLD]", "One")
else:
    SSDT5 = SSDT5.replace("[HS78]", "0xFF")
    SSDT5 = SSDT5.replace("[HS78GPLD]", "Zero")

if HS1112:
    SSDT5 = SSDT5.replace("[HS1112]", "0x00")
    SSDT5 = SSDT5.replace("[HS1112GPLD]", "One")
else:
    SSDT5 = SSDT5.replace("[HS1112]", "0xFF")
    SSDT5 = SSDT5.replace("[HS1112GPLD]", "Zero")

if SS12:
    SSDT5 = SSDT5.replace("[SS12]", "0x03")
    SSDT5 = SSDT5.replace("[SS12GPLD]", "One")
else:
    SSDT5 = SSDT5.replace("[SS12]", "0xFF")
    SSDT5 = SSDT5.replace("[SS12GPLD]", "Zero")

if SS34:
    SSDT5 = SSDT5.replace("[SS34]", "0x03")
    SSDT5 = SSDT5.replace("[SS34GPLD]", "One")
else:
    SSDT5 = SSDT5.replace("[SS34]", "0xFF")
    SSDT5 = SSDT5.replace("[SS34GPLD]", "Zero")

with open(os.path.join(savepath,"USB-SSDT.dsl"), "w") as dsl_file:
    dsl_file.write(USBSSDT)

with open(os.path.join(savepath,"SSDT-5.dsl"), "w") as dsl_file:
    dsl_file.write(SSDT5)
with open(os.devnull, "w") as f:
	call([os.path.join(currentpath,"iasl61"), os.path.join(savepath,"USB-SSDT.dsl")], stdout=f)
	call([os.path.join(currentpath,"iasl61"), os.path.join(savepath,"SSDT-5.dsl")], stdout=f)
os.remove(os.path.join(savepath,"USB-SSDT.dsl"))
os.remove(os.path.join(savepath,"SSDT-5.dsl"))

print "\n\n"
print "The files USB-SSDT.aml and SSDT-5.aml was added to your " + color.BOLD + "Desktop." + color.END + "\n"
print "Remove any other USB patches (Like USBInjectAll).\n"
print "Place these files in /EFI/Clover/ACPI/patched\n"
print "Add the following to ACPI in your config.plist" 
print color.BOLD + "Note:" + color.END + " This is already included in the config.plist from my guide.\n\n"
print "<key>DropTables</key>\n		<array>\n			<dict>\n    			<key>Signature</key>\n    			<string>SSDT</string>\n    			<key>TableId</key>\n    			<string>xh_rvp10</string>\n  			</dict>\n  		</array>"